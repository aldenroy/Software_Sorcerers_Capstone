// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MyBddProject.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SSC207_StreamingServicePrices")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class SSC207_StreamingServicePricesFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SSC207_StreamingServicePrices", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "SSC207_StreamingServicePrices.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 3
#line hidden
#line 4
  await testRunner.GivenAsync("I am logged in on the dashboard page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid price entry for a service")]
        public async System.Threading.Tasks.Task ValidPriceEntryForAService()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Valid price entry for a service", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
await this.FeatureBackgroundAsync();
#line hidden
#line 7
  await testRunner.GivenAsync("the \"Monthly Price\" input for \"Hulu\" is empty", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
  await testRunner.WhenAsync("I type \"12.99\" into the \"Monthly Price\" input for \"Hulu\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
  await testRunner.ThenAsync("the value \"12.99\" is saved for \"Hulu\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 10
  await testRunner.AndAsync("I see \"12.99\" displayed next to \"Hulu\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Monthly Price inputs are navigable via keyboard")]
        public async System.Threading.Tasks.Task MonthlyPriceInputsAreNavigableViaKeyboard()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Monthly Price inputs are navigable via keyboard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
await this.FeatureBackgroundAsync();
#line hidden
#line 13
  await testRunner.WhenAsync("I tab through the Manage Subscriptions section until the \"Monthly Price\" input fo" +
                        "r \"Disney+\" is focused", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
  await testRunner.ThenAsync("focus is on the \"Monthly Price\" input for \"Disney+\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 15
  await testRunner.WhenAsync("I type \"8.99\" into that input", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 16
  await testRunner.AndAsync("I press Enter to submit the form", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
  await testRunner.ThenAsync("the new value is submitted for \"Disney+\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Monthly Price inputs and spend summary are announced by screen readers")]
        public async System.Threading.Tasks.Task MonthlyPriceInputsAndSpendSummaryAreAnnouncedByScreenReaders()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Monthly Price inputs and spend summary are announced by screen readers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
await this.FeatureBackgroundAsync();
#line hidden
#line 20
  await testRunner.WhenAsync("focus lands on the \"Monthly Price\" input for \"Netflix\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
  await testRunner.ThenAsync("a screen reader announces \"Monthly Price input for Netflix\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 22
  await testRunner.WhenAsync("I type \"9.99\" into that input", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
  await testRunner.ThenAsync("the screen reader confirms \"9.99\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 24
  await testRunner.WhenAsync("I toggle \"Streaming Service Analysis\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
  await testRunner.ThenAsync("the summary announces \"Total Monthly Cost\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
